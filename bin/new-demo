#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require_relative '../lib/demo_scripts'
require 'optparse'

options = {
  shakapacker_version: nil,
  react_on_rails_version: nil,
  rails_args: [],
  react_on_rails_args: [],
  dry_run: false,
  shakapacker_prerelease: false,
  react_on_rails_prerelease: false,
  scratch: false,
  skip_playwright: false,
  typescript: false
}

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: bin/new-demo DEMO_NAME [options]'
  opts.separator ''
  opts.separator 'Description:'
  opts.separator '  Creates a new basic React on Rails demo application with PostgreSQL,'
  opts.separator '  Shakapacker, and React on Rails pre-configured. Uses version defaults'
  opts.separator '  from .new-demo-versions unless overridden.'
  opts.separator ''
  opts.separator '  Automatically installs:'
  opts.separator '    - Playwright E2E testing (run with: npx playwright test)'
  opts.separator '    - Linting and code quality tools'
  opts.separator '    - Git hooks via Lefthook'
  opts.separator ''
  opts.separator 'Example: bin/new-demo react_on_rails-demo-v16-typescript-setup'
  opts.separator ''
  opts.separator 'Options:'

  opts.on('--dry-run', 'Show commands that would be executed without running them') do
    options[:dry_run] = true
  end

  opts.on('--shakapacker-version VERSION', 'Shakapacker version (or github:org/repo@branch)') do |v|
    options[:shakapacker_version] = v
  end

  opts.on('--react-on-rails-version VERSION', 'React on Rails version (or github:org/repo@branch)') do |v|
    options[:react_on_rails_version] = v
  end

  opts.on('--rails-args ARGS', 'Additional arguments to pass to rails new (comma-separated)') do |args|
    options[:rails_args] = args.split(',').map(&:strip)
  end

  opts.on('--react-on-rails-args ARGS',
          'Additional arguments to pass to react_on_rails:install (comma-separated)') do |args|
    options[:react_on_rails_args] = args.split(',').map(&:strip)
  end

  opts.on('--shakapacker-prerelease', 'Use latest prerelease (beta/rc) version for Shakapacker') do
    options[:shakapacker_prerelease] = true
  end

  opts.on('--react-on-rails-prerelease', 'Use latest prerelease (beta/rc) version for React on Rails') do
    options[:react_on_rails_prerelease] = true
  end

  opts.on('--prerelease', 'Use latest prerelease (beta/rc) versions for both gems') do
    options[:shakapacker_prerelease] = true
    options[:react_on_rails_prerelease] = true
  end

  opts.on('--scratch', 'Create demo in gitignored /demos-scratch directory for experimentation') do
    options[:scratch] = true
  end

  opts.on('--skip-playwright', 'Skip Playwright browser installation') do
    options[:skip_playwright] = true
  end

  opts.on('--typescript', 'Enable TypeScript for both Shakapacker and React on Rails') do
    options[:typescript] = true
  end

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    puts ''
    puts 'Examples:'
    puts '  # Basic demo with defaults'
    puts '  bin/new-demo my-demo'
    puts ''
    puts '  # Use prerelease versions'
    puts '  bin/new-demo my-demo --prerelease'
    puts '  bin/new-demo my-demo --shakapacker-prerelease'
    puts '  bin/new-demo my-demo --react-on-rails-prerelease'
    puts ''
    puts '  # Use GitHub branches'
    puts '  bin/new-demo my-demo --shakapacker-version="github:shakacode/shakapacker@my-branch"'
    puts '  bin/new-demo my-demo --react-on-rails-version="github:shakacode/react_on_rails@fix-hmr"'
    puts ''
    puts '  # Customize Rails and React on Rails setup'
    puts '  bin/new-demo my-demo --rails-args="--skip-test,--api"'
    puts '  bin/new-demo my-demo --react-on-rails-args="--redux,--node"'
    puts '  bin/new-demo my-demo --rails-args="--skip-test" --react-on-rails-args="--redux"'
    puts ''
    puts '  # Enable TypeScript'
    puts '  bin/new-demo my-demo --typescript'
    puts ''
    puts '  # Create experimental demo in gitignored directory'
    puts '  bin/new-demo my-demo --scratch'
    puts ''
    puts 'After creation, run E2E tests with:'
    puts '  cd demos/my-demo && npx playwright test'
    exit
  end
end

begin
  parser.parse!

  if ARGV.empty?
    puts parser
    exit 1
  end

  demo_name = ARGV[0]

  creator = DemoScripts::DemoCreator.new(
    demo_name: demo_name,
    **options
  )

  creator.create!
rescue DemoScripts::Error => e
  warn "Error: #{e.message}"
  exit 1
rescue OptionParser::InvalidOption => e
  warn e.message
  puts parser
  exit 1
end
