#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require_relative '../lib/demo_scripts'
require 'pathname'
require 'optparse'

module DemoScripts
  # Applies shared configurations to all demos
  class SharedConfigApplier < DemoManager
    CONFIG_FILES = {
      '.rubocop.yml' => 'config/rubocop.yml',
      'eslint.config.js' => 'configs/eslint.config.js',
      'prettier.config.js' => 'configs/prettier.config.js'
    }.freeze

    def apply!
      validate_directories!

      puts 'ðŸ”§ Applying shared configurations to all demos...'

      each_demo do |demo_path|
        apply_to_demo(demo_path)
      end

      puts 'âœ… Shared configurations applied successfully!'
    end

    private

    def validate_directories!
      raise Error, 'packages/shakacode_demo_common directory not found' unless shakacode_demo_common_exists?
    end

    def apply_to_demo(demo_path)
      puts "ðŸ“¦ Updating #{demo_name(demo_path)}..."
      create_config_symlinks(demo_path)
      update_gemfile(demo_path)
    end

    def create_config_symlinks(demo_path)
      CONFIG_FILES.each do |target_name, source_path|
        source_file = File.join(@shakacode_demo_common_path, source_path)
        next unless File.exist?(source_file)

        create_symlink(source_file, File.join(demo_path, target_name), target_name)
      end
    end

    def create_symlink(source, target, name)
      relative_source = calculate_relative_path(target, source)
      puts "  Linking #{name}..."

      if @dry_run
        puts "  [DRY-RUN] ln -sf #{relative_source} #{target}"
      else
        FileUtils.rm_f(target)
        FileUtils.ln_s(relative_source, target)
      end
    end

    def update_gemfile(demo_path)
      gemfile_path = File.join(demo_path, 'Gemfile')
      return unless File.exist?(gemfile_path)

      if File.read(gemfile_path).include?('shakacode_demo_common')
        puts '  shakacode_demo_common already in Gemfile'
        return
      end

      add_gem_to_gemfile(gemfile_path)
    end

    def add_gem_to_gemfile(gemfile_path)
      puts '  Adding shakacode_demo_common to Gemfile...'
      addition = <<~GEM

        # Shared demo configuration and utilities
        gem "shakacode_demo_common", path: "../../packages/shakacode_demo_common"
      GEM

      if @dry_run
        puts "  [DRY-RUN] Would append to #{gemfile_path}"
      else
        File.open(gemfile_path, 'a') { |f| f.puts addition }
      end
    end

    def calculate_relative_path(from, to)
      Pathname.new(to).relative_path_from(Pathname.new(File.dirname(from))).to_s
    end
  end
end

# Main execution
options = { dry_run: false }

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: bin/apply-shared [options]'
  opts.separator ''
  opts.separator 'Apply shared configurations to all demos'
  opts.separator ''

  opts.on('--dry-run', 'Show what would be done') { options[:dry_run] = true }
  opts.on('-h', '--help', 'Show this help') do
    puts opts
    exit
  end
end

begin
  parser.parse!
  DemoScripts::SharedConfigApplier.new(**options).apply!
rescue DemoScripts::Error => e
  warn "Error: #{e.message}"
  exit 1
rescue StandardError => e
  warn "Unexpected error: #{e.message}"
  exit 1
end
