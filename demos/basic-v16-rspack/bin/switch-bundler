#!/usr/bin/env ruby
# frozen_string_literal: true

# Script to switch between webpack and rspack bundlers
# Usage: bin/switch-bundler [webpack|rspack] [--install-deps]

require "yaml"
require "fileutils"

SHAKAPACKER_CONFIG = "config/shakapacker.yml"
CUSTOM_DEPS_CONFIG = ".shakapacker-switch-bundler-dependencies.yml"

# Default dependencies for each bundler (package names only, no versions)
DEFAULT_RSPACK_DEPS = {
  dev: %w[@rspack/cli @rspack/plugin-react-refresh],
  prod: %w[@rspack/core rspack-manifest-plugin]
}.freeze

DEFAULT_WEBPACK_DEPS = {
  dev: %w[webpack webpack-cli webpack-dev-server @pmmmwh/react-refresh-webpack-plugin],
  prod: %w[webpack-assets-manifest webpack-merge]
}.freeze

def current_bundler
  config = YAML.load_file(SHAKAPACKER_CONFIG, aliases: true)
  config.dig("default", "assets_bundler") || "webpack"
end

# rubocop:disable Metrics/MethodLength
def load_dependencies
  if File.exist?(CUSTOM_DEPS_CONFIG)
    puts "📝 Using custom dependencies from #{CUSTOM_DEPS_CONFIG}"
    begin
      custom = YAML.load_file(CUSTOM_DEPS_CONFIG, aliases: true)
    rescue Psych::SyntaxError => e
      puts "❌ Error parsing #{CUSTOM_DEPS_CONFIG}: #{e.message}"
      puts "   Please fix the YAML syntax or delete the file to use defaults"
      exit 1
    end
    rspack_deps = {
      dev: custom.dig("rspack", "devDependencies") || DEFAULT_RSPACK_DEPS[:dev],
      prod: custom.dig("rspack", "dependencies") || DEFAULT_RSPACK_DEPS[:prod]
    }
    webpack_deps = {
      dev: custom.dig("webpack", "devDependencies") || DEFAULT_WEBPACK_DEPS[:dev],
      prod: custom.dig("webpack", "dependencies") || DEFAULT_WEBPACK_DEPS[:prod]
    }
    [rspack_deps, webpack_deps]
  else
    [DEFAULT_RSPACK_DEPS, DEFAULT_WEBPACK_DEPS]
  end
end
# rubocop:enable Metrics/MethodLength

def create_config_file
  if File.exist?(CUSTOM_DEPS_CONFIG)
    puts "⚠️  #{CUSTOM_DEPS_CONFIG} already exists"
    exit 1
  end

  config = {
    "rspack" => {
      "devDependencies" => DEFAULT_RSPACK_DEPS[:dev],
      "dependencies" => DEFAULT_RSPACK_DEPS[:prod]
    },
    "webpack" => {
      "devDependencies" => DEFAULT_WEBPACK_DEPS[:dev],
      "dependencies" => DEFAULT_WEBPACK_DEPS[:prod]
    }
  }

  File.write(CUSTOM_DEPS_CONFIG, YAML.dump(config))
  puts "✅ Created #{CUSTOM_DEPS_CONFIG}"
  puts ""
  puts "You can now customize the dependencies for each bundler in this file."
  puts "The script will automatically use these custom dependencies when switching bundlers."
  exit 0
end

# rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Metrics/MethodLength, Metrics/PerceivedComplexity, Style/OptionalBooleanParameter, Metrics/BlockNesting
def install_dependencies(bundler, install_deps, switching_bundlers = true)
  rspack_deps, webpack_deps = load_dependencies
  deps_to_install = bundler == "rspack" ? rspack_deps : webpack_deps
  deps_to_remove = bundler == "rspack" ? webpack_deps : rspack_deps

  puts ""
  if install_deps
    puts "📦 Managing dependencies..."

    # Remove old bundler dependencies (only when switching)
    if switching_bundlers
      unless deps_to_remove[:dev].empty?
        puts "   Removing old dev dependencies..."
        unless system("npm uninstall #{deps_to_remove[:dev].join(' ')}")
          puts "   ⚠️  Warning: Failed to uninstall some dev dependencies"
        end
      end

      unless deps_to_remove[:prod].empty?
        puts "   Removing old prod dependencies..."
        unless system("npm uninstall #{deps_to_remove[:prod].join(' ')}")
          puts "   ⚠️  Warning: Failed to uninstall some prod dependencies"
        end
      end
    end

    # Install new bundler dependencies
    unless deps_to_install[:dev].empty?
      puts "   Installing new dev dependencies..."
      unless system("npm install --save-dev #{deps_to_install[:dev].join(' ')}")
        puts "❌ Failed to install dev dependencies"
        exit 1
      end
    end

    unless deps_to_install[:prod].empty?
      puts "   Installing new prod dependencies..."
      unless system("npm install --save #{deps_to_install[:prod].join(' ')}")
        puts "❌ Failed to install prod dependencies"
        exit 1
      end
    end

    # Clean reinstall to fix optional dependencies (rspack native bindings)
    if bundler == "rspack"
      puts ""
      puts "   🔧 Fixing rspack native bindings (cleaning node_modules and package-lock.json)..."
      FileUtils.rm_rf("node_modules")
      FileUtils.rm_f("package-lock.json")
      puts "   Running clean npm install..."
      unless system("npm install")
        puts "❌ Failed to run clean npm install"
        exit 1
      end
    end

    puts "   ✅ Dependencies updated"
  else
    puts "⚠️  Dependencies not automatically installed (use --install-deps to auto-install)"
    puts ""

    if bundler == "rspack"
      puts "📦 To install rspack dependencies, run:"
      puts "   npm install --save-dev #{deps_to_install[:dev].join(' ')}"
      puts "   npm install --save #{deps_to_install[:prod].join(' ')}"
      puts ""
      puts "🗑️  To remove webpack dependencies, run:"
    else
      puts "📦 To install webpack dependencies, run:"
      puts "   npm install --save-dev #{deps_to_install[:dev].join(' ')}"
      puts "   npm install --save #{deps_to_install[:prod].join(' ')}"
      puts ""
      puts "🗑️  To remove rspack dependencies, run:"
    end
    puts "   npm uninstall #{deps_to_remove[:dev].join(' ')}"
    puts "   npm uninstall #{deps_to_remove[:prod].join(' ')}"
  end
end
# rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Metrics/MethodLength, Metrics/PerceivedComplexity, Style/OptionalBooleanParameter, Metrics/BlockNesting

# rubocop:disable Metrics/CyclomaticComplexity, Metrics/MethodLength
def switch_to(bundler, install_deps)
  unless %w[webpack rspack].include?(bundler)
    puts "❌ Invalid bundler: #{bundler}"
    puts "   Usage: bin/switch-bundler [webpack|rspack] [--install-deps]"
    exit 1
  end

  current = current_bundler
  if current == bundler && !install_deps
    puts "✅ Already using #{bundler}"
    exit 0
  end

  if current == bundler && install_deps
    puts "✅ Already using #{bundler} - reinstalling dependencies as requested"
    install_dependencies(bundler, install_deps, false)
    exit 0
  end

  # Update shakapacker.yml using text replacement to preserve comments and structure
  content = File.read(SHAKAPACKER_CONFIG)

  # Replace assets_bundler value (matches both 'webpack' and "webpack" or rspack)
  content.gsub!(/^(\s*assets_bundler:\s*['"]?)(webpack|rspack)(['"]?)/, "\\1#{bundler}\\3")

  # Update javascript_transpiler recommendation for rspack
  if bundler == "rspack" && content !~ /javascript_transpiler:\s*['"]?swc['"]?/
    content.gsub!(/^(\s*javascript_transpiler:\s*['"]?)\w+(['"]?)/, "\\1swc\\2")
  end

  File.write(SHAKAPACKER_CONFIG, content)

  puts "✅ Switched from #{current} to #{bundler}"
  puts ""
  puts "📝 Configuration updated in #{SHAKAPACKER_CONFIG}"

  # Manage dependencies
  install_dependencies(bundler, install_deps)

  puts ""
  puts "🎯 Next steps:"
  puts "   1. Restart your dev server: bin/dev"
  puts "   2. Verify build works: bin/shakapacker"
  puts ""
  puts "💡 Tip: Both webpack and rspack can coexist in package.json during migration"
  puts "        Use --install-deps to automatically manage dependencies, or manage manually"
end
# rubocop:enable Metrics/CyclomaticComplexity, Metrics/MethodLength

def show_usage
  current = current_bundler
  puts "Current bundler: #{current}"
  puts ""
  puts "Usage: bin/switch-bundler [webpack|rspack] [--install-deps] [--init-config] [--help]"
  puts ""
  puts "Options:"
  puts "  --install-deps    Automatically install/uninstall dependencies"
  puts "  --init-config     Create #{CUSTOM_DEPS_CONFIG} with default dependencies"
  puts "  --help, -h        Show this help message"
  puts ""
  puts "Examples:"
  puts "  bin/switch-bundler rspack              # Switch to rspack (manual dependency install)"
  puts "  bin/switch-bundler rspack --install-deps   # Switch to rspack and auto-manage deps"
  puts "  bin/switch-bundler webpack --install-deps  # Switch to webpack and auto-manage deps"
  puts "  bin/switch-bundler --init-config           # Create custom dependencies config file"
end

if ARGV.empty? || ARGV.include?("--help") || ARGV.include?("-h")
  show_usage
  exit 0
elsif ARGV.include?("--init-config")
  create_config_file
else
  bundler = ARGV[0]
  install_deps = ARGV.include?("--install-deps")
  switch_to(bundler, install_deps)
end
