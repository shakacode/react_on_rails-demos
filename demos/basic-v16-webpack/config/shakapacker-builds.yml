# Bundler Build Configurations
# Generated by: bin/shakapacker-config --init
#
# Run builds with: bin/shakapacker --build <name>
# List builds: bin/shakapacker --list-builds

builds:
  # ===========================================================================
  # DEVELOPMENT WITH HMR (Hot Module Replacement)
  # ===========================================================================
#  dev-hmr:
#    description: Client bundle with HMR (React Fast Refresh)
#    dev_server: true  # Auto-delegates to bin/shakapacker-dev-server
#    environment:
#      NODE_ENV: development
#      RAILS_ENV: development
#      WEBPACK_SERVE: true
#    outputs:
#      - client

#  # ===========================================================================
#  # DEVELOPMENT (Standard - no HMR)
#  # ===========================================================================
#  dev:
#    description: Development client bundle
#    environment:
#      NODE_ENV: development
#      RAILS_ENV: development
#    outputs:
#      - client

#  # ===========================================================================
#  # PRODUCTION
#  # ===========================================================================
#  prod:
#    description: Production client bundle
#    environment:
#      NODE_ENV: production
#      RAILS_ENV: production
#    outputs:
#      - client

  # ===========================================================================
  # REACT ON RAILS WITH SSR (Uncomment to enable)
  # ===========================================================================
  # Run separate client and server bundles for server-side rendering
  # For more info: https://github.com/shakacode/react_on_rails

  dev:
    description: Development client bundle with HMR for SSR
    environment:
      NODE_ENV: development
      RAILS_ENV: development
    outputs:
      - client
      - server

  dev-hmr:
    description: Development client bundle with HMR for SSR
    dev_server: true
    environment:
      NODE_ENV: development
      RAILS_ENV: development
      WEBPACK_SERVE: "true"
      CLIENT_BUNDLE_ONLY: "yes"
    outputs:
      - client

  prod:
    description: Production client bundle for SSR
    environment:
      NODE_ENV: production
      RAILS_ENV: production
    outputs:
      - client
      - server

  # ============================================================================
  # ADDITIONAL EXAMPLES
  # ============================================================================

  # Example: Single bundle only (client or server)
  # dev-client-only:
  #   description: Development client bundle only
  #   environment:
  #     NODE_ENV: development
  #     RAILS_ENV: development
  #     CLIENT_BUNDLE_ONLY: "yes"
  #   outputs:
  #     - client

  # Example: Using bundler --env flags
  # prod-modern:
  #   description: Production with custom webpack/rspack --env flags
  #   environment:
  #     NODE_ENV: production
  #     RAILS_ENV: production
  #   bundler_env:
  #     target: modern         # Becomes: --env target=modern
  #     instrumented: true     # Becomes: --env instrumented
  #   outputs:
  #     - client
  #     - server

  # Example: Variable substitution with defaults
  # staging:
  #   description: Staging environment with variable substitution
  #   environment:
  #     NODE_ENV: production
  #     RAILS_ENV: ${RAILS_ENV:-staging}  # Use env var or default to 'staging'
  #   outputs:
  #     - client
  #     - server

  # Example: Custom config file path (uses ${BUNDLER} substitution)
  # custom-config:
  #   description: Using custom config file location
  #   environment:
  #     NODE_ENV: development
  #   config: config/${BUNDLER}/${BUNDLER}.config.js
  #   outputs:
  #     - client
  #     - server

# ============================================================================
# USAGE EXAMPLES
# ============================================================================
#
# Initialize this config file:
#   bin/shakapacker-config --init
#
# List all available builds:
#   bin/shakapacker-config --list-builds
#
# Export development build configs:
#   bin/shakapacker-config --build=dev-hmr
#   Creates: rspack-dev-hmr-client.yml
#
#   bin/shakapacker-config --build=dev
#   Creates: rspack-dev-client.yml, rspack-dev-server.yml
#
# Export production build:
#   bin/shakapacker-config --build=prod
#   Creates: rspack-prod-client.yml, rspack-prod-server.yml
#
# Use webpack instead of default rspack:
#   bin/shakapacker-config --build=prod --webpack
#   Creates: webpack-prod-client.yml, webpack-prod-server.yml
#
# Export to stdout for inspection (no files created):
#   bin/shakapacker-config --build=dev --stdout
#
# Export to custom directory:
#   bin/shakapacker-config --build=prod --save-dir=./debug
#
# Doctor mode (comprehensive troubleshooting):
#   bin/shakapacker-config --doctor
#   Creates files in: shakapacker-config-exports/
#
